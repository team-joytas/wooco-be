name: Deploy DEV

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: DEV 배포 환경변수 설정
        run: |
          echo "${{ secrets.SPRING_ENV }}" | base64 -d > bootstrap/api/src/main/resources/.env

      - name: Gradle 캐싱
        uses: actions/cache@v4
        id: cache-gradle
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 을 통해 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew :bootstrap:api:bootJar

      - name: Docker 빌드 도구 설정
        uses: docker/setup-buildx-action@v2.9.1

      - name: Docker Hub 로그인
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile-api
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_HUB_REPOSITORY }}:${{ secrets.IMAGE_TAG }}

  docker-pull-and-run:
    runs-on: [ self-hosted, Linux, X64, dev ]
    needs: docker-build-and-push
    if: success()

    steps:
      - name: 배포 이미지 가져오기
        run: |
          sudo docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          sudo docker pull ${{ secrets.DOCKER_HUB_REPOSITORY }}:${{ secrets.IMAGE_TAG }}

      - name: blue green 배포 스크립트 실행
        run: |
          sudo chmod +x deploy.sh
          sudo ./deploy.sh

      - name: 사용하지 않는 도커 이미지 정리
        run: |
          sudo docker image prune --all --force
